// Service Worker –¥–ª—è My Weekly Planner PWA

const CACHE_NAME = 'planner-v1.0.0'
const API_CACHE_NAME = 'planner-api-v1.0.0'
const STATIC_CACHE_NAME = 'planner-static-v1.0.0'

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_ASSETS = [
  '/',
  '/manifest.json',
  '/_next/static/css/',
  '/_next/static/chunks/',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
  '/offline.html'
]

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const API_ENDPOINTS = [
  '/api/tasks',
  '/api/ideas',
  '/api/auth/session'
]

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('üîß Service Worker: Installing...')
  
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME)
      .then(cache => {
        console.log('üì¶ Service Worker: Caching static assets')
        return cache.addAll(STATIC_ASSETS)
      })
      .then(() => self.skipWaiting())
  )
})

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('üöÄ Service Worker: Activating...')
  
  event.waitUntil(
    caches.keys()
      .then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (cacheName !== CACHE_NAME && 
                cacheName !== API_CACHE_NAME && 
                cacheName !== STATIC_CACHE_NAME) {
              console.log('üóëÔ∏è Service Worker: Deleting old cache', cacheName)
              return caches.delete(cacheName)
            }
          })
        )
      })
      .then(() => self.clients.claim())
  )
})

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
  const { request } = event
  const url = new URL(request.url)

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º chrome-extension –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-http –∑–∞–ø—Ä–æ—Å—ã
  if (!url.protocol.startsWith('http')) {
    return
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request))
    return
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  if (request.destination === 'script' || 
      request.destination === 'style' || 
      request.destination === 'image' ||
      url.pathname === '/') {
    event.respondWith(handleStaticRequest(request))
    return
  }

  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±—É–µ–º —Å–µ—Ç—å, –ø–æ—Ç–æ–º –∫—ç—à
  event.respondWith(
    fetch(request)
      .catch(() => caches.match(request))
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—Ñ–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
async function handleApiRequest(request) {
  const url = new URL(request.url)
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏
    const networkResponse = await fetch(request)
    
    // –ï—Å–ª–∏ GET –∑–∞–ø—Ä–æ—Å - –∫—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if (request.method === 'GET' && networkResponse.ok) {
      const responseClone = networkResponse.clone()
      const cache = await caches.open(API_CACHE_NAME)
      cache.put(request, responseClone)
    }
    
    return networkResponse
  } catch (error) {
    console.log('üåê Service Worker: Network failed, trying cache for', request.url)
    
    // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫—ç—à
    const cachedResponse = await caches.match(request)
    
    if (cachedResponse) {
      return cachedResponse
    }
    
    // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã–µ
    if (request.method === 'GET') {
      return getOfflineApiResponse(url.pathname)
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return new Response(
      JSON.stringify({ 
        error: 'Offline - no cached data available',
        offline: true 
      }),
      {
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleStaticRequest(request) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–µ—Ç—å
    const networkResponse = await fetch(request)
    
    // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE_NAME)
      cache.put(request, networkResponse.clone())
    }
    
    return networkResponse
  } catch (error) {
    console.log('üåê Service Worker: Static request failed, trying cache')
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cachedResponse = await caches.match(request)
    
    if (cachedResponse) {
      return cachedResponse
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –Ω–µ—Ç –∫—ç—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (request.url === self.location.origin + '/') {
      return caches.match('/offline.html')
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return new Response('Resource not available offline', { status: 503 })
  }
}

// –û—Ñ–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç—ã –¥–ª—è API
function getOfflineApiResponse(pathname) {
  const offlineData = {
    '/api/tasks': {
      data: [],
      message: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑–∞–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      offline: true
    },
    '/api/ideas': {
      data: [],
      message: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑–∞–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–¥–µ–∏',
      offline: true
    },
    '/api/auth/session': {
      user: null,
      message: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      offline: true
    }
  }
  
  const data = offlineData[pathname] || { 
    error: 'No offline data available',
    offline: true 
  }
  
  return new Response(
    JSON.stringify(data),
    {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    }
  )
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
self.addEventListener('sync', event => {
  console.log('üîÑ Service Worker: Background sync', event.tag)
  
  if (event.tag === 'sync-tasks') {
    event.waitUntil(syncTasks())
  }
})

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
async function syncTasks() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ IndexedDB
    const unsyncedTasks = await getUnsyncedTasks()
    
    for (const task of unsyncedTasks) {
      try {
        const response = await fetch('/api/tasks', {
          method: task.method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(task.data)
        })
        
        if (response.ok) {
          // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await removeTaskFromSyncQueue(task.id)
        }
      } catch (error) {
        console.error('Failed to sync task:', error)
      }
    }
  } catch (error) {
    console.error('Sync failed:', error)
  }
}

// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('push', event => {
  console.log('üì¢ Service Worker: Push received')
  
  const options = {
    body: event.data ? event.data.text() : '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-96x96.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        icon: '/icons/icon-96x96.png'
      },
      {
        action: 'close',
        title: '–ó–∞–∫—Ä—ã—Ç—å',
        icon: '/icons/icon-96x96.png'
      }
    ]
  }
  
  event.waitUntil(
    self.registration.showNotification('My Weekly Planner', options)
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', event => {
  console.log('üîî Service Worker: Notification click received')
  
  event.notification.close()
  
  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/')
    )
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
self.addEventListener('message', event => {
  console.log('üí¨ Service Worker: Message received', event.data)
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
  
  if (event.data && event.data.type === 'CACHE_Tasks') {
    event.waitUntil(
      caches.open(API_CACHE_NAME)
        .then(cache => cache.add('/api/tasks'))
    )
  }
})

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
self.addEventListener('periodicsync', event => {
  console.log('‚è∞ Service Worker: Periodic sync')
  
  if (event.tag === 'sync-tasks-periodic') {
    event.waitUntil(syncTasks())
  }
})

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB (–¥–ª—è –æ—Ñ–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏)
async function getUnsyncedTasks() {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å IndexedDB
  // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  return []
}

async function removeTaskFromSyncQueue(taskId) {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ IndexedDB
  console.log('Task synced:', taskId)
}

console.log('üöÄ Service Worker: Loaded successfully')